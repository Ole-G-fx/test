Версия Java
java SDK Temurin Eclipse 1.8.0_312

Система сборки (pom файл в составе проекта)
Maven 3.8.4

IDE IntelliJ IDEA 2022.3.1

сторонние библиотеки не использовались
файлы для тестов прилагаю

Задача файловое слияние (TaskFileMerging.java)
    Класс предназначенный для запуска проекта (точка входа), указывается при сборке проекта

SortingMerge Основной модуль управления проекта принимает управление от TaskFileMerging
Свойства содержат коллекцию потоков чтения (из файла) и поток записи (в файл).

    метод Start() - подготавливает потоки, запускает сортировку, закрывает потоки, запускает
        анализатор строки входящих параметров args[]
    метод sortIt() - непосредственно сортировка слиянием, оперирует потоками чтения/записи
        получает начальные значения из класса-обертки, алгоритм сравнения тоже реализован
        в классе-обертке

ParsArgsAndCreateStreams функция разбора аргументов командной строки, соответствует условиям:
    '-i' сортировка чисел типа Integer
    '-s' сортировка строк символов в кодировке ASCII
    '-a' по умолчанию (необязательный параметр) сортировка в порядке возрастания элементов
    '-d' сортировка в порядке убывания элементов
    '-l' (необязательный параметр) размер буфера чтения/записи в количестве символов, чем
         больше размер тем больше оперативной памяти компьютера можно использовать
         стандартный размер для BufferedReader 8192 символа, если указать только '-l',
         то размер будет 524228 символов или можно указать свой размер '-l65536',
         ограничено размерностью Integer защиты от некорректного ввода пока нет
         т.е. отрицательные значения приведут к вылету
    далее следует указать имя выходного файла, (обязательное) и через пробел имена входных файлов,
    не менее одного.
    Примеры запуска из командной строки для Windows:
    java -jar program.jar -i -a out.txt in.txt (для целых чисел по возрастанию)
    java -jar program.jar -s out.txt in1.txt in2.txt in3.txt (для строк по возрастанию)
    java -jar program.jar -d -s out.txt in1.txt in2.txt (для строк по убыванию)
    В зависимости от указанных данных создаются создаются потоки чтения/записи. Коллекция объектов
    для чтения и один объект для записи. Коллекция возвращается через ссылку входного параметра, а
    объект для записи в файл возвращается через return.
    Внутрь объектов передается информация об типе данных, порядке сортировки, размер буфера, имя
    файла открываемого для чтения/записи.
    В свойствах указаны вспомогательные флаги для выявления исключений, передачи некоторых параметров
    в конструктор другого класса
        parsing() - основной запускающий метод, через него работают остальные, разбивает весь процесс
        анализа на несколько этапов
        parsingFistArgs() - выполняет анализ первых коротких параметров командной строки, заполняет
        соответствующие свойства корневого класса
        createWriterStream() - инициирует создание класса-оболочки для потока записи
        createReaderStreams() - инициирует создание коллекции классов-оболочек для потока чтения

    OutStream - интерфейс для создания семейства классов-оберток
        close() закрывает поток записи
        setNext() записывает элемент в файл

    OutStreamImpl - реализует конструкторы и закрытие потоков записи
        close() - закрывает поток BufferedWriter записи в файл

    OutStreamString - реализует методы взаимодействия с классом-оберткой
        setNext() запись строки в файл и переход на следующую строку

    OutStreamInteger - реализует методы взаимодействия с классом-оберткой
        setNext() запись числа в файл и переход на следующую строку

    InStream - интерфейс для создания семейства классов-оберток над потоками чтения из файла
        close() закрывает поток чтения
        getNext() читает следующий элемент
        getCurrentElement() - вернуть текущий элемент
        getValue() - вернуть значение предельное для типа данных и в зависимости от сортировки по
            возрастанию/убыванию возвращает max/min элемент данного типа
        compare() - операция сравнения для элемента данного типа данных (необходимо для сортировки)

    InStreamAbsImpl - реализует конструкторы для потоков чтения в свойствах поток чтения, направление
        сортировки, имя читаемого файла
        close() реализация закрытия потока чтения

    InStreamInteger - реализация обертки потока чтения для типа данных Integer, сохраняет текущий
    элемент читаемого потока
        getNext() реализация чтения из файла через BufferedReader и переход на следующий элемент
            обработка некоторых исключений читаемых данных

	Для запуска собранного jar архива нужно использовать команду(пример):
		java -jar CTF.jar -s -a out.txt 1.txt 2.txt
		java -jar CTF.jar -s -d out.txt insd1.txt insd2.txt ins4.txt
		java -jar CTF.jar -i -d -l90 out.txt ind1.txt ind2.txt ins4.txt
		java -jar CTF.jar -i -l out.txt in1.txt in2.txt in3.txt in4.txt ins4.txt 1.txt 2.txt

	тестовые файлы находятся в корне каталога